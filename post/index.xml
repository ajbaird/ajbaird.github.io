<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Austin Baird</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 26 Apr 2020 20:00:32 -0400</lastBuildDate>
    <image>
      <url>/images/icon_hua6f7ce57f3518c16caa76578815b11e1_187136_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Building and running BioGears on a MacOS</title>
      <link>/post/buildingbiogears/</link>
      <pubDate>Sun, 26 Apr 2020 20:00:32 -0400</pubDate>
      <guid>/post/buildingbiogears/</guid>
      <description>&lt;h1 id=&#34;biogears-on-a-mac&#34;&gt;BioGears on a Mac&lt;/h1&gt;
&lt;p&gt;These instructions will mostly be taken from the following 
&lt;a href=&#34;https://github.com/BioGearsEngine/core/wiki/MacOS-10.13-llvm-9.1-x86_64-apple-darwin17&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cloning-and-building&#34;&gt;Cloning and Building&lt;/h2&gt;
&lt;p&gt;To begin create a suitable directory where you&#39;d like the code to reside. For this example, I&#39;ll be cloning and building BioGears in &lt;code&gt;~/BioGears/Core&lt;/code&gt; directory. To perform all of this work we will be using brew package manager. To access brew, on the command line paste in the follow text &lt;code&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you have a directory and the package manager set up, navigate to that newly created directory through the command line and copy the clone 
&lt;a href=&#34;https://github.com/BioGearsEngine/core.git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt; on github. From this directory we will install all the dependencies needed to begin running and using BioGears. To proceed copy and past the following code (to install requirements)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install wget
brew install git
brew install ninja
brew  install g++
brew  install gcc
brew  install eigen
brew  install log4cpp
brew  install xerces-c
brew install xsd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Navigate the core folder (for me, &lt;code&gt;~/Development/BioGears/Core/core&lt;/code&gt;) and create a build directory &lt;code&gt;mkdir build&lt;/code&gt;. Next, navigate to that build folder. We will now go through a series a cmake commands to set up the build configuration. We will make a few assumptions; first, we will assume that our install directory will be &lt;code&gt;opt/biogears/usr&lt;/code&gt;. We will then link a prefix path. Now from the build folder we can type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake -G &amp;quot;Ninja&amp;quot; -DCMAKE_INSTALL_PREFIX=/opt/biogears/usr \
                 -DCMAKE_PREFIX_PATH=&#39;/usr/local/opt \
                 -DBiogears_BUILD_JAVATOOLS=OFF \ 
                 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;
&lt;p&gt;If it isn&#39;t present you might have forgotten the &amp;lsquo;..&amp;rsquo; at the end of the command chain above.
To fix this issue back out to the top directory, for me this will be Core. From Core use the rm command to remove the cloned directory&lt;code&gt;--- BioGears/Core » rm -rf core&lt;/code&gt;  then re-clone BioGears: &lt;code&gt;--- BioGears/Core » git clone https://github.com/BioGearsEngine/core.git core&lt;/code&gt; then create the build folder, navigate to the build folder and re-run the cmake command above. &lt;code&gt;--- BioGears/Core/core/build » cmake -G &amp;quot;Ninja&amp;quot; -DCMAKE_INSTALL_PREFIX=/opt/biogears/usr -DCMAKE_PREFIX_PATH=&#39;/usr/local/opt&#39; -DBiogears_BUILD_JAVATOOLS=OFF ..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Hopefully this will create the required file.&lt;/p&gt;
&lt;h2 id=&#34;building-and-testing-scenario-driver&#34;&gt;Building and Testing Scenario Driver&lt;/h2&gt;
&lt;p&gt;Now from the build folder, we can build the scenario driver executable. This program creates a serializes in a scenario file, creates a BioGears engine and then pushes actions and data calls to the engine. Its a great place to start understanding how to use BioGears and what the engine is capable of.&lt;/p&gt;
&lt;p&gt;To build the scenario driver, simply type (from the build folder) &lt;code&gt;--- BioGears/Core/core/build » ninja scenario_driver&lt;/code&gt;, now lets run the scenario driver to test that it&#39;s working correctly. First navigate to the runtime directory (if there isn&#39;t a generated runtime directory type &lt;code&gt;cmake STAGE&lt;/code&gt; from the build directory). From the runtime directory type &lt;code&gt;../outputs/Release/bin/scenario_driver ./Scenarios/Patient/BasicStandard.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To confirm that this file ran, navigate to the ./Scenarios/Patient folder and confirm that there is a BasicStandard.log and BasicStandardResults.csv file. Feel free to look at the log and associated xml, log, and csv files to figure out the structure of a scenario run and how the outputs reflect what you input into the .xml.&lt;/p&gt;
&lt;h2 id=&#34;configuring-xcode-build&#34;&gt;Configuring Xcode Build&lt;/h2&gt;
&lt;p&gt;To configure a build that generates an Xcode project, make a new build folder in core, called &lt;code&gt;core/buildXcode&lt;/code&gt;, then in the cmake GUI set up the configuration step as shown in the image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./cmake1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;After you configure the where the source code is and where the build files will be generated (top two lines) as seen in the image. Click the configure button and select Xcode from the generators list that will pop up. There should be no errors, if there are you might need to re-install some of the binaries. Next, click generate, there will be some red text but this step should still finish. Next, click open project and the project should be launched in Xcode. In the next image you can see the folder structure and the Cardiovascular.cpp file which houses all models associated with BioGears cardiovascular system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./xcodeProj.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;You might want to be able to build BioGears targets through the XCode UI. In that case simply configure a scheme. For this example click the scheme button in the top left page, the in the drop down select ALL_BUILD. This will build all the CMAKE targets that are defined. This is good if you want to begin to reference the HowTo files to start making your own application with BioGears! Once the scheme is configured just hit the play button to begin building the ALL_BUILD target. NOTE: there will be a LOT of warnings, but there shouldn&#39;t be any errors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./xcodeBuild.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;To confirm that the build worked, there should be a newly generated buildxcode folder that was generated (this is different from the one that we had cmake generate, mostly to differentiate between the two build systems). From there confirm that &lt;code&gt;buildxcode/runtime&lt;/code&gt; folder. This folder houses all the extra files that are needed for BioGears to run! Confirm that there is a bunch of stuff in this folder (mostly .xml and .config files). Then we can confirm that some of our other projects built, specifically we want to confirm that the HowTo files compiled. Navigate to the where all built binaries are stored. For me, building debug targets, they are located in &lt;code&gt;/Users/abaird/Development/BioGears/Core/core/buildxcode/outputs/Debug/bin&lt;/code&gt;. Your bin should look like below for reference:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./bin.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you have other issues while building, feel free to post a comment on the community pages (
&lt;a href=&#34;https://github.com/BioGearsEngine/core/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building and running the BioGears user interface on a MacOS</title>
      <link>/post/buildingbiogearsui/</link>
      <pubDate>Sun, 26 Apr 2020 20:00:32 -0400</pubDate>
      <guid>/post/buildingbiogearsui/</guid>
      <description>&lt;h1 id=&#34;biogears-ui-on-a-mac&#34;&gt;BioGears UI on a Mac&lt;/h1&gt;
&lt;p&gt;These instructions will mostly be taken from the following 
&lt;a href=&#34;https://github.com/ajbaird/ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cloning-and-building&#34;&gt;Cloning and Building&lt;/h2&gt;
&lt;p&gt;Firs thing we want to do is fork the UI project 
&lt;a href=&#34;https://github.com/ajbaird/ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;. Once you have it forked on your github page, navigate tot the repository and clone the repository into the directory structure of your choice. For this tutorial I&#39;ll be cloning the project into &lt;code&gt;~/Development/BioGears/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once cloned we will go through building the GUI. For this to work we first need to have a built copy of BioGears to reference. The git project is structured in such a way that there is a submodule included that once initialized, will clone a copy of the BioGears code base into a &lt;code&gt;./extern/biogears/&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;From the root of where you cloned the UI, for me this is &lt;code&gt;BioGears/ui&lt;/code&gt;, then in the terminal type &lt;code&gt;git submodule init&lt;/code&gt; then make sure you are up to date with &lt;code&gt;git submodule update&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./biogearsExtern.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;This command will automatically clone the latest master commit from the BioGears core project. Once BioGears has been pulled from core, we need to build BioGears&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir build-biogears
cd build-biogears
cmake ../projectslibbiogears -DCMAKE_INSTALL_PREFIX=${PWD}../build-gui/usr 
cmake --build . -config Release -target install 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will install to the usr folder within the user interface, all build files will be in the build-biogears folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./command.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We also need to make sure that Qt is installed on our system. I will not cover cloning and building Qt but it is VERY important to make sure that you download and install Qt version 5.12, otherwise the BioGears UI will not work.&lt;/p&gt;
&lt;p&gt;Now that we have BioGears AND Qt 5.12 installed, we are ready to install the UI, first we want to configure the project using cmake. The easiest way to do this is to navigate to the build directory with the cmake GUI:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./cmake.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now we need to configure cmake prefix path to be set to where the BioGears core libs are located. We can do this via the command line, or you can set them in the cmakeLists.txt file. For my use, I&#39;m going to open this file in VS code, then append the prefix path to include the BioGears libs, as well as where the Qt install is (this is only if Qt is not included in your environment paths):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./SetPrefixPaths.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are not using VS code you can set the prefix paths either through the cmake UI, OR via the command line.&lt;/p&gt;
&lt;p&gt;Now everything should be ready to run. If you are using VS code and have installed the cmake third party support, you should be able to run the configure command at the bottom of the screen, make sure that you set the compiler for your system (here I&#39;m using clang, via mac). BioGears should build for most modern c++ compilers. Here is an example of my configuration at the bottom of the VS code UI:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./config.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note to make sure that you have a build folder either created with cmake, or create it yourself via the command line or explorer window. Now you can configure the project. Using VS code you can do this by clicking the cmake button and selecting &amp;ldquo;Release&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./cmakeConfig.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now going left to right, click the &amp;ldquo;build&amp;rdquo; button, this should begin the build for the set configuration. When you click this button it will build all available targets, if you only want to build one target (say the UI) and not the scenario executor (a core biogears executable) then click the button just to the right of &amp;ldquo;build&amp;rdquo; and select the target you are interested in. Everything should compile correctly and there should be a note on where the executable is located:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./buildUI.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now double check that all of the executables are built and in the appropriate folder, they should be located in the /bin folder under releases, you can see if you select the project to build &amp;ldquo;all&amp;rdquo; there will be the command line utilities and scenario executor in that folder as well as the UI:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./files.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets test and run the application. In order to do this, there is one last thing that we need to do. First, navigate to where the BioGears core runtime directory is, for me its &lt;code&gt;./ui/build-biogears/runtime&lt;/code&gt; basically it will be anywhere you built the biogears dependencies. Copy the contents of that folder and drop it into the &lt;code&gt;./ui/build/Release/bin&lt;/code&gt; folder. Now that folder should have a lot of content:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./bin.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once completed you should be able to now click the play arrow in VS studio and have the UI launch!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./final.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you have other issues while building, feel free to post a comment on the community pages (
&lt;a href=&#34;https://github.com/BioGearsEngine/ui/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hemorrhage Treatment HowTo</title>
      <link>/post/firsthowto/</link>
      <pubDate>Sun, 26 Apr 2020 20:00:32 -0400</pubDate>
      <guid>/post/firsthowto/</guid>
      <description>&lt;h1 id=&#34;leveraging-biogears-libraries-to-write-your-own-howto&#34;&gt;Leveraging BioGears libraries to write your own HowTo&lt;/h1&gt;
&lt;p&gt;We have BioGears built and ready to go but the question is, now what? What can we do with BioGears, how powerful is it and what type of applications can be build with it? These are some of the questions we will address in this tutorial on developing your own application leveraging BioGears API tools in C++. In this tutorial you will learn to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a fork of your BioGears project&lt;/li&gt;
&lt;li&gt;Create a new howto project and verify CMAKE configs&lt;/li&gt;
&lt;li&gt;Modify the hemorrhage existing howto to include vasopressin and fluid administration&lt;/li&gt;
&lt;li&gt;Use the command line to log vitals and administer treatments to the patient&lt;/li&gt;
&lt;li&gt;Get an overview of data requests and their structure&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;running-a-howto-file&#34;&gt;Running a HowTo file&lt;/h2&gt;
&lt;p&gt;To start lets first just verify that we can, in fact, run one of the many HowTo files provided by BioGears when we clone the repository. If you followed, the first post on this site you should have built BioGears as well as all the HowTos. If you didn&#39;t complete that please refer back this that 
&lt;a href=&#34;https://austinbaird.dev/post/buildingbiogears/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post&lt;/a&gt;. To run a HowTo file simply execute the binaries in the proper directory. In this example I&#39;m going to be running the HowToHemorrhage file. This will give the patient a hemorrhage located in the spleen, at a rate of 150 ml/min. The below image shows you what the command will be.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./runHem.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;because I&#39;m using xcode as my development environment, I&#39;ll be executing the code from the runtime directory generated by xcode, located in the buildxcode folder. Once the how to is running you should see the following being logged in your command window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./patientRun.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If there are no errors on the console output, then chances are everything ran correctly but just to double check. Since we ran the howto from the runtime directory, the data should be located in that same directory. Verify that a HowToHemorrhage.csv and HowToHemorrhage.log both were generated in runtime (there are a LOT of files in runtime so sorry in advance for making you track it down). The .csv file holds all of the data request data printed each time step (or whenever the user specifies) and the .log file holds all the information that was printed to the terminal.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-new-howto-project&#34;&gt;Creating a new HowTo project&lt;/h2&gt;
&lt;p&gt;Now if BioGears is cloned from github, we will now need to set our remote to a fork of the repository so that all the code we push is our own. Once we are happy with what we&#39;ve created then you can always push back changes to be integrated into the master branch of core. To do this, reference this 
&lt;a href=&#34;https://gist.github.com/jagregory/710671&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;. Once completed if you type &lt;code&gt;git remote -v&lt;/code&gt; you should see your origin set to your fork branch and upstream is still set to the BioGears core repository. Now we you can rebase origin off the upstream repository in the future and submit pull requests back to upstream!&lt;/p&gt;
&lt;p&gt;First step to creating a new project is to just copy the hemorrhage folder under &lt;code&gt;core/projects/howto/hemorrhage&lt;/code&gt; This will pull all the existing files that we just ran and will be the basis for the work that we want to do. To update the projects list in Xcode we need to re-configure and generate the project using CMAKE. The image below shows our new howto project titled hemorrhagetreatment. Generally, these projects are laid out as a main file that runs routines, you can see this structure of the project if you look at the files included from the hemorrhage howto.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./configuration.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creating-a-patient-vitals-logger&#34;&gt;Creating a patient vitals logger&lt;/h2&gt;
&lt;p&gt;Ultimately, we want to create a command line tool that lets us:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;display patient vitals&lt;/li&gt;
&lt;li&gt;give treatment to the patient&lt;/li&gt;
&lt;li&gt;alert us to any patient events that may occur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do this we will start with baby steps, first lets just make a program that lets us configure the patient bleed rate and location and displays patient vitals every 10 seconds. To begin, lets lean on the dynamic sepsis and hemorrhage how tos. We start with creating the BioGears engine an loading in the patient state file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void HowToHemorrhageTreatment()
{
   // Create the engine and load the patient
  std::unique_ptr&amp;lt;PhysiologyEngine&amp;gt; bg = 
          CreateBioGearsEngine(&amp;quot;HowToHemorrhageTreatment.log&amp;quot;);
  bg-&amp;gt;GetLogger()-&amp;gt;Info(&amp;quot;HowToHemorrhageTreatment&amp;quot;);
  bool simulation = true;
    
// Load patient
  if (!bg-&amp;gt;LoadState(&amp;quot;./states/StandardMale@0s.xml&amp;quot;)) {
    bg-&amp;gt;GetLogger()-&amp;gt;Error(&amp;quot;Could not load state, check the error&amp;quot;);
    return;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we need to set all the data requests that we want to be logged to our .csv file we will create:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;  bg-&amp;gt;GetEngineTrack()-&amp;gt;GetDataRequestManager().CreatePhysiologyDataRequest().
  Set(&amp;quot;HeartRate&amp;quot;, FrequencyUnit::Per_min);
  bg-&amp;gt;GetEngineTrack()-&amp;gt;GetDataRequestManager().CreatePhysiologyDataRequest().
  Set(&amp;quot;BloodVolume&amp;quot;, VolumeUnit::mL);
  bg-&amp;gt;GetEngineTrack()-&amp;gt;GetDataRequestManager().CreatePhysiologyDataRequest().
  Set(&amp;quot;CardiacOutput&amp;quot;, VolumePerTimeUnit::mL_Per_min);
  bg-&amp;gt;GetEngineTrack()-&amp;gt;GetDataRequestManager().CreatePhysiologyDataRequest().
  Set(&amp;quot;MeanArterialPressure&amp;quot;, PressureUnit::mmHg);

  bg-&amp;gt;GetEngineTrack()-&amp;gt;GetDataRequestManager().
  SetResultsFilename(&amp;quot;HowToHemorrhageTreatment.csv&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this application we will just be concerned with cardiovascular system outputs such as cardiac output and mean arterial pressure. See other how tos and scenarios for more examples of the types of data requests we may configure.&lt;/p&gt;
&lt;p&gt;No we will set up a simple cin to store the location and rate of the hemorrhage, in the example below we are restricting the user to a select number of locations and fixed units for the bleed rate. Fancier applications may want to expand these options. BioGears has a generic unit conversion engine built in and the supports numerous hemorrhage locations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;  std::string hemorrageLocation;
  int hemorrageRate;

  std::cout &amp;lt;&amp;lt; &amp;quot;Please type the location of the hemorrhage as: leftleg, spleen, 
  or aorta. Followed by the rate of the bleed (assuming units of mL/min), 
  ex. leftleg 150 &amp;quot; &amp;lt;&amp;lt; std::endl;
  std::cin &amp;gt;&amp;gt; hemorrageLocation &amp;gt;&amp;gt; hemorrageRate;
  //Process update to hemorrhage action
  hem.SetCompartment(hemorrageLocation);
  bg-&amp;gt;ProcessAction(hem);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will initialize some parameters we will use in this simulation, here we will create objects for vasopressin and saline and a few other variables used in the do case:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;  int action;
  bool simulation = true;
  double rate;
  double concentration;
  SESubstance* vas = bg-&amp;gt;GetSubstanceManager().GetSubstance(&amp;quot;Vasopressin&amp;quot;);
  SESubstanceBolus bolus(*vas);
  SESubstanceCompound* saline = bg-&amp;gt;GetSubstanceManager().GetCompound(&amp;quot;Saline&amp;quot;);
  SESubstanceCompoundInfusion* salineInfusion = 
          new SESubstanceCompoundInfusion(*saline);
  salineInfusion-&amp;gt;GetBagVolume().SetValue(500, VolumeUnit::mL);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets log some information to the command line for the user to interact with. We want to let them administer saline, administer a tourniquet, vasopressin, advance time for a few minutes, or log patient information, we will construct this tool as a do loop to continue logging:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;  do {
    bg-&amp;gt;GetLogger()-&amp;gt;Info(&amp;quot;Enter Integer for Action to Perform : 
    \n\t[1] Status \n\t[2] IVFluids \n\t[3] tourniquet 
    \n\t[4] Vasopressin Admin \n\t[5] Quit \n&amp;quot;);
    std::cin &amp;gt;&amp;gt; action;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this next block of code will enact actions that are initialized by the user, each case will correspond to a different action we want to allow the user to push to BioGears during runtime:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;do {
    bg-&amp;gt;AdvanceModelTime(1.0, TimeUnit::s);
    bg-&amp;gt;GetEngineTrack()-&amp;gt;TrackData(bg-&amp;gt;GetSimulationTime(TimeUnit::s));
    bg-&amp;gt;GetLogger()-&amp;gt;Info(&amp;quot;Enter Integer for Action to Perform : \n\t[1] Status 
    \n\t[2] IVFluids \n\t[3] tourniquet \n\t[4] Vasopressin Admin 
    \n\t[5] Advance time 2 min \n\t[6] Quit \n&amp;quot;);
    std::cin &amp;gt;&amp;gt; action;
    switch (action) {
    case 1:
      bg-&amp;gt;GetLogger()-&amp;gt;Info(&amp;quot;&amp;quot;);
      bg-&amp;gt;GetLogger()-&amp;gt;Info(std::stringstream() &amp;lt;&amp;lt; &amp;quot;Simulation Time  : &amp;quot; 
      &amp;lt;&amp;lt; bg-&amp;gt;GetSimulationTime(TimeUnit::min) &amp;lt;&amp;lt; &amp;quot;min&amp;quot;);
      bg-&amp;gt;GetLogger()-&amp;gt;Info(std::stringstream() &amp;lt;&amp;lt; &amp;quot;Blood Volume : &amp;quot; 
      &amp;lt;&amp;lt; bg-&amp;gt;GetCardiovascularSystem()-&amp;gt;GetBloodVolume(VolumeUnit::mL) 
      &amp;lt;&amp;lt; &amp;quot;mL&amp;quot;;
      bg-&amp;gt;GetLogger()-&amp;gt;Info(std::stringstream() &amp;lt;&amp;lt; &amp;quot;Mean Arterial Pressure : &amp;quot; 
      &amp;lt;&amp;lt; bg-&amp;gt;GetCardiovascularSystem()-&amp;gt;
      GetMeanArterialPressure(PressureUnit::mmHg) &amp;lt;&amp;lt; &amp;quot;mmHg&amp;quot;;
      bg-&amp;gt;GetLogger()-&amp;gt;Info(std::stringstream() &amp;lt;&amp;lt; &amp;quot;Heart Rate : &amp;quot; 
      &amp;lt;&amp;lt; bg-&amp;gt;GetCardiovascularSystem()-&amp;gt;GetHeartRate(FrequencyUnit::Per_min) 
      &amp;lt;&amp;lt; &amp;quot;bpm&amp;quot;);
      break;
    case 2:
      bg-&amp;gt;GetLogger()-&amp;gt;Info(&amp;quot;Enter IV Fluids Rate in mL/min 
      (bag volume is 500 mL), followed by ENTER : &amp;quot;);
      std::cin &amp;gt;&amp;gt; rate;
      saline-&amp;gt;GetRate().SetValue(rate, VolumePerTimeUnit::mL_Per_min);
      bg-&amp;gt;ProcessAction(*saline);
      break;
    case 3:
      bg-&amp;gt;GetLogger()-&amp;gt;Info(&amp;quot;Administering tourniquet&amp;quot;);
      hem.GetInitialRate().SetValue(0, VolumePerTimeUnit::mL_Per_min);
      break;
    case 4:
      bg-&amp;gt;GetLogger()-&amp;gt;Info(&amp;quot;Enter a concentration in ug/mL 
      (will be delivered by a 10 mL push intravesnously), followed by ENTER : &amp;quot;);
      std::cin &amp;gt;&amp;gt; concentration;
      bolus.GetConcentration().SetValue(concentration, 
      MassPerVolumeUnit::ug_Per_mL);
      bolus.GetDose().SetValue(10, VolumeUnit::mL);
      bolus.SetAdminRoute(CDM::enumBolusAdministration::Intravenous);
      break;
    case 5:
      bg-&amp;gt;AdvanceModelTime(2.0, TimeUnit::min);
      bg-&amp;gt;GetEngineTrack()-&amp;gt;TrackData(bg-&amp;gt;GetSimulationTime(TimeUnit::s));
      break;
    case 6:
      simulation = false;
      break;
      }
    } while(simulation);
  
  bg-&amp;gt;GetLogger()-&amp;gt;Info(&amp;quot;Finished&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it is running correctly your console screen should look the like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./consol.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;To confirm that the simulation ran and logged the appropriate data, navigate to the runtime directory and make sure that the HowtoHemorrhageTreatment.log and HowtoHemorrhageTreatment.csv file are present. You can then use your favorite data analysis tool to plot the results you are interested in.&lt;/p&gt;
&lt;p&gt;To see the full set of code developed for this tutorial, please see the 
&lt;a href=&#34;https://github.com/ajbaird/core/tree/masterFork/projects/howto/HemorrhageTreatment/src&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have other issues feel free to post a comment on the community pages (
&lt;a href=&#34;https://github.com/BioGearsEngine/core/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Python to Create Plotting Animations</title>
      <link>/post/pythonanimation/</link>
      <pubDate>Sun, 26 Apr 2020 20:00:32 -0400</pubDate>
      <guid>/post/pythonanimation/</guid>
      <description>&lt;h1 id=&#34;using-matplotlib-animation-functionality-to-create-videos&#34;&gt;Using Matplotlib animation functionality to create videos&lt;/h1&gt;
&lt;p&gt;As a little bit of an aside, I thought that I would detail a python script I wrote that takes in comma separated data (.csv files) to ouputs an mp4 movie of the data. This is useful if you&#39;d like to create an animated plot of your temporal data to highlight the progression or evolution of the plot over time. I find that this type of data presentation can, sometimes, be more compelling than just introducing a line plot. It is especially compelling when placed side-by-side with three dimensional data. I wrote this script to plot bifurcation data over sime while a three dimensional .vtk plot runs next to it. In this blog you will (hopefully):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a function that takes in command line arguments for your script&lt;/li&gt;
&lt;li&gt;Use pythons OS library to check paths given by the user and generate output folders&lt;/li&gt;
&lt;li&gt;Format graphs using matplotlib to create publication worthy output&lt;/li&gt;
&lt;li&gt;Use the animation library to generate videos of your data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;command-line-arguments&#34;&gt;Command Line Arguments&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./runHem.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;check-paths-and-verify-data&#34;&gt;Check Paths and Verify Data&lt;/h2&gt;
&lt;h2 id=&#34;formatting-graphs-using-matplotlib&#34;&gt;Formatting Graphs Using Matplotlib&lt;/h2&gt;
&lt;h2 id=&#34;animating-the-data&#34;&gt;Animating the Data&lt;/h2&gt;
&lt;p&gt;If it is running correctly your console screen should look the like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./consol.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;To see the full set of code developed for this tutorial, please see the 
&lt;a href=&#34;https://github.com/ajbaird/TBISimulator/blob/master/animateData.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have other issues feel free to post a comment on the community pages (
&lt;a href=&#34;https://github.com/BioGearsEngine/core/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;)!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
